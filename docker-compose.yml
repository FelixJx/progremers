version: '3.8'

services:
  # AI Agent团队后端服务
  ai-agent-backend:
    build: .
    container_name: ai_agent_backend
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - PYTHONPATH=/app
    volumes:
      - ./logs:/app/logs
      - ./reports:/app/reports
    restart: unless-stopped
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Agent团队前端服务 (Nginx静态文件服务)
  ai-agent-frontend:
    image: nginx:alpine
    container_name: ai_agent_frontend
    ports:
      - "3000:80"
    volumes:
      - ./frontend/dist:/usr/share/nginx/html
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - ai-agent-backend
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    container_name: agent_team_postgres
    environment:
      POSTGRES_USER: agent_user
      POSTGRES_PASSWORD: agent_pass
      POSTGRES_DB: agent_team_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agent_user -d agent_team_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: agent_team_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Optional: Qdrant向量数据库
  qdrant:
    image: qdrant/qdrant
    container_name: agent_team_qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__LOG_LEVEL: INFO

volumes:
  postgres_data:
  redis_data:
  qdrant_data: